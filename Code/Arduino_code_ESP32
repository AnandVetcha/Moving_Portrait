/*
 * This ESP32 code is created by esp32io.com
 *
 * This ESP32 code is released in the public domain
 *
 * For more detail (instruction and wiring diagram), visit https://esp32io.com/tutorials/esp32-ultrasonic-sensor-servo-motor
 */
#ifdef ARDUINO_ARCH_ESP8266
#include <ESP8266WiFi.h>
#endif

#ifdef ARDUINO_ARCH_ESP32
#include <WiFi.h>
#endif
#include <esp8266-google-home-notifier.h>
#include <Servo_ESP32.h>

static const int servoPin = 19; //printed G14 on the board

Servo_ESP32 servo1;

int angle =0;
int angleStep = 1;

int angleMin =0;
int angleMax = 180;


#define trigPin 5 // define TrigPin
#define echoPin 18 // define EchoPin.
#define MAX_DISTANCE 200 // Maximum sensor distance is rated at 400-500cm.
// define the timeOut according to the maximum range. timeOut= 2*MAX_DISTANCE /100 /340 *1000000 = MAX_DISTANCE*58.8
float timeOut = MAX_DISTANCE * 60; 
int soundVelocity = 340; // define sound speed=340m/s
int flag_start_meditation = 0;

const char* ssid     = "<Enter_your_widi_ssid>";
const char* password = "<Enter_your_wifi_passowrd>";
GoogleHomeNotifier ghn;

void setup() {
    Serial.begin(115200);
    servo1.attach(servoPin);
    pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
    pinMode(echoPin, INPUT); // Sets the echoPin as an Input

    // Setting up WIFI
    Serial.println("");
  Serial.print("connecting to Wi-Fi");
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(250);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("connected.");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());  //Print the local IP
  
  const char displayName[] = "Dining Room speaker";

  Serial.println("connecting to Google Home...");
  if (ghn.device(displayName, "en") != true) {
    Serial.println(ghn.getLastError());
    return;
  }
  Serial.print("found Google Home(");
  Serial.print(ghn.getIPAddress());
  Serial.print(":");
  Serial.print(ghn.getPort());
  Serial.println(")");
}

void loop() {
  delay(1000); // Wait 100ms between pings (about 20 pings/sec). 29ms should be the shortest delay between pings.
  Serial.print("Ping: ");
  Serial.print(getSonar()); // Send ping, get distance in cm and print result (0 = outside set distance range)
  Serial.println("cm");
  if (getSonar()>5 && getSonar()<70) {
    for(int angle = 0; angle <= angleMax; angle +=angleStep) {
        servo1.write(angle);
        //Serial.println(angle);
        delay(10);
    }

    for(int angle = 180; angle >= angleMin; angle -=angleStep) {
        servo1.write(angle);
        //Serial.println(angle);
        delay(10);
    }
    if (flag_start_meditation == 0) {
      if (ghn.notify("Hey Google, start Meditation.") != true) {
        Serial.println(ghn.getLastError());
      }
      flag_start_meditation = 1;
    }
  }
}

float getSonar() {
  unsigned long pingTime;
  float distance;
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); // make trigPin output high level lasting for 10Î¼s to triger HC_SR04,
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  pingTime = pulseIn(echoPin, HIGH, timeOut); // Wait HC-SR04 returning to the high level and measure out this waitting time
  distance = (float)pingTime * soundVelocity / 2 / 10000; // calculate the distance according to the time
  return distance; // return the distance value
}
